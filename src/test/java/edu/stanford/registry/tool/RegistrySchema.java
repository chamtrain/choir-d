/*
 * Copyright 2014 The Board of Trustees of The Leland Stanford Junior University.
 * All Rights Reserved.
 *
 * See the NOTICE and LICENSE files distributed with this work for information
 * regarding copyright ownership and licensing. You may not use this file except
 * in compliance with a written license agreement with Stanford University.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See your
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package edu.stanford.registry.tool;

import com.github.susom.database.Flavor;
import com.github.susom.database.Schema;

/**
 * Database objects related to the core registry functionality.
 *
 * @author garricko
 */
public class RegistrySchema {
  public static Schema create() {
    return new Schema()
      .addTable("survey_system")
        .addColumn("survey_system_id").primaryKey().table()
        .addColumn("survey_system_name").asString(200).table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().schema()
      .addSequence("survey_system_seq").start(1000).schema()

      .addTable("study")
        .addColumn("survey_system_id").asLong().notNull().table()
        .addColumn("study_code").asLong().notNull().table()
        .addColumn("study_description").asString(2000).table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addColumn("title").asString(400).table()
        .addColumn("explanation").asString(4000).table()
        .addColumn("replaced_by_code").asInteger().table()
        .addPrimaryKey("study_pk", "survey_system_id", "study_code").table()
        .addForeignKey("study_survey_system_id_fk", "survey_system_id").references("survey_system").table().schema()
      .addSequence("study_code_seq").start(1000).schema()

      .addTable("patient")
        .addColumn("patient_id").asString(50).primaryKey().table()
        .addColumn("first_name").asString(100).table()
        .addColumn("last_name").asString(100).table()
        .addColumn("dt_birth").asDate().table()
        .addColumn("consent").asStringFixed(1).table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().schema()
      .addSequence("patient_seq").min(100).schema()

      .addTable("assessment_registration")
        .addColumn("assessment_reg_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("email_addr").asString(255).table()
        .addColumn("assessment_dt").asDate().notNull().table()
        .addColumn("assessment_type").asString(200).notNull().table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addForeignKey("asmt_reg_site_id_fk", "survey_site_id").references("survey_site").table()
        .addForeignKey("asmt_reg_patient_id_fk", "patient_id").references("patient").table()
        .addIndex("asmt_reg_site_astype_idx", "survey_site_id", "assessment_type").table()
        .addIndex("asmt_reg_patient_id_idx", "patient_id").table().schema()

      .addTable("survey_registration")
        .addColumn("survey_reg_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("assessment_reg_id").asLong().notNull().table()
        .addColumn("survey_name").asString(255).notNull().table()
        .addColumn("survey_order").asInteger().notNull().table()
        .addColumn("token").asString(4000).notNull().table()
        .addColumn("survey_dt").asDate().notNull().table()
        .addColumn("survey_type").asString(200).table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addForeignKey("survey_reg_site_id_fk", "survey_site_id").references("survey_site").table()
        .addForeignKey("survey_reg_patient_id_fk", "patient_id").references("patient").table()
        .addForeignKey("survey_reg_asmt_id_fk", "assessment_reg_id").references("assessment_registration").table()
        .addIndex("survey_reg_site_pat_tok_uq", "survey_site_id", "patient_id", "token").unique().table()
        .addIndex("survey_reg_site_token_uq", "survey_site_id", "token").unique().table()
        .addIndex("survey_reg_patient_site_idx", "patient_id", "survey_site_id", "survey_dt").table()
        .addIndex("appt_reg_asmt_site_pat_idx", "assessment_reg_id", "survey_site_id", "patient_id").table().schema()

      .addTable("appt_registration")
        .addColumn("appt_reg_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("assessment_reg_id").asLong().table()
        .addColumn("visit_dt").asDate().notNull().table()
        .addColumn("registration_type").asStringFixed(1).table() // TODO default 'a'
        .addColumn("visit_type").asString(20).table()
        .addColumn("appt_complete").asStringFixed(1).table()
        .addColumn("clinic").asString(200).table()
        .addColumn("encounter_eid").asString(200).table()
        .addColumn("provider_id").asLong().table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addCheck("appt_reg_appt_complete_ck", "appt_complete in ('N', 'Y')").table()
        .addForeignKey("appt_reg_site_id_fk", "survey_site_id").references("survey_site").table()
        .addForeignKey("appt_reg_patient_id_fk", "patient_id").references("patient").table()
        .addForeignKey("appt_reg_asmt_id_fk", "assessment_reg_id").references("assessment_registration").table()
        .addForeignKey("appt_reg_prov_id_fk", "provider_id").references("provider").table()
        .addIndex("appt_reg_site_id_idx", "survey_site_id").table()
        .addIndex("appt_reg_patient_id_idx", "patient_id").table()
        .addIndex("appt_reg_asmt_id_idx", "assessment_reg_id").table().schema()

      .addTable("patient_study")
        .addColumn("patient_study_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("survey_reg_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("survey_system_id").asLong().notNull().table()
        .addColumn("study_code").asLong().notNull().table()
        .addColumn("token").asString(4000).notNull().table()
        .addColumn("external_reference_id").asString(200).table()
        .addColumn("order_number").asLong().table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addColumn("xml_clob").asClob().table()
        .addForeignKey("patient_study_survey_reg_fk", "survey_reg_id").references("survey_registration").table()
        .addForeignKey("patient_study_sur_sys_id_fk", "survey_system_id").references("survey_system").table()
        .addForeignKey("patient_study_study_code_fk", "survey_system_id", "study_code").references("study").table()
        .addForeignKey("patient_study_patient_id_fk", "patient_id").references("patient").table()
        .addForeignKey("patient_study_site_fk", "survey_site_id").references("survey_site").table()
        .addIndex("patient_study_pat_site_tok_idx", "patient_id", "survey_site_id", "token").table()
        .addIndex("patient_study_site_token_o_idx", "survey_site_id", "token", "order_number").table() // matches token table pk
        .addIndex("patient_study_study_code_idx", "survey_system_id", "study_code").table()
        .customTableClause(Flavor.oracle, "lob (xml_clob) store as securefile (compress deduplicate)").schema()

      .addTable("notification")
        .addColumn("notification_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("assessment_reg_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("email_type").asString(200).table()
        .addColumn("email_dt").asDate().table()
        .addColumn("survey_dt").asDate().notNull().table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addForeignKey("not_asmt_reg_id_fk", "assessment_reg_id").references("assessment_registration").table()
        .addForeignKey("not_patient_id_fk", "patient_id").references("patient").table()
        .addForeignKey("not_site_id_fk", "survey_site_id").references("survey_site").table()
        .addIndex("not_asmt_reg_id_idx", "assessment_reg_id").table()
        .addIndex("not_patient_site_surdt_idx", "patient_id", "survey_site_id", "survey_dt").table()
        .addIndex("notification_site_surdt_idx", "survey_site_id", "survey_dt").table()
        .addIndex("notification_email_dt_idx", "email_dt").table().schema()
      .addSequence("notification_id_seq").start(1100).schema()

      .addTable("patient_attribute")
        .addColumn("patient_attribute_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("data_name").asString(250).notNull().table()
        .addColumn("data_value").asString(250).table()
        .addColumn("data_type").asString(50).table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addForeignKey("patient_att_pat_id_fk", "patient_id").references("patient").table()
        .addForeignKey("patient_att_site_id_fk", "survey_site_id").references("survey_site").table()
        .addIndex("patient_att_pat_dat_uq", "survey_site_id", "patient_id", "data_name").unique().table()
        .addIndex("patient_att_pat_id_idx", "patient_id").table().schema()

      .addTable("patient_attribute_history")
        .addColumn("patient_attribute_history_id").primaryKey().table()
        .addColumn("patient_attribute_id").asLong().notNull().table() // not foreign key to allow attribute deletion
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("data_name").asString(250).notNull().table()
        .addColumn("data_value").asString(250).table()
        .addColumn("data_type").asString(50).table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addColumn("user_principal_id").asLong().table()
        .addForeignKey("patient_att_his_pat_id_fk", "patient_id").references("patient").table()
        .addForeignKey("patient_att_hist_site_id_fk", "survey_site_id").references("survey_site").table()
        .addIndex("pat_att_his_site_pat_name_idx", "survey_site_id", "patient_id", "data_name").table()
        .addIndex("patient_att_his_pat_id_idx", "patient_id").table().schema()

      .addTable("patient_ext_attr")
        .addColumn("patient_ext_attr_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("data_name").asString(250).notNull().table()
        .addColumn("data_value").asClob().table()
        .addColumn("data_type").asString(50).table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addForeignKey("pat_ext_attr_p_fk", "patient_id").references("patient").table()
        .addForeignKey("pat_ext_attr_s_fk", "survey_site_id").references("survey_site").table()
        .addIndex("pat_ext_attr_s_p_d_uq", "survey_site_id", "patient_id", "data_name").unique().table()
        .addIndex("pat_ext_attr_p_idx", "patient_id").table().schema()

      .addTable("patient_ext_attr_hist")
        .addColumn("patient_ext_attr_hist_id").primaryKey().table()
        .addColumn("patient_ext_attr_id").asLong().notNull().table() // not foreign key to allow attribute deletion
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("data_name").asString(250).notNull().table()
        .addColumn("data_value").asClob().table()
        .addColumn("data_type").asString(50).table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addColumn("user_principal_id").asLong().table()
        .addForeignKey("pat_ext_attr_hist_p_fk", "patient_id").references("patient").table()
        .addForeignKey("pat_ext_attr_hist_s_fk", "survey_site_id").references("survey_site").table()
        .addIndex("pat_ext_attr_hist_s_p_idx", "survey_site_id", "patient_id", "data_name").table()
        .addIndex("pat_ext_attr_hist_p_idx", "patient_id").table().schema()

      .addTable("randomset").withComment("Most randomset algorithms save state to keep groups balanced")
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("set_name").asString(50).notNull()
          .withComment("Not a foreign key because names are from app_config, only unique for the randomset type").table()
        .addColumn("state").asString(50).withComment("Enrolling,NotEnrolling,Researching,Closed").table()
        .addColumn("algorithm").asString(20).withComment("Just FYI, since the set definition is hidden in a json").table()
        .addColumn("dt_end").asDate().withComment("optional end-date").table()
        .addColumn("target_size").asInteger().withComment("optional total number of participants").table()
        .addColumn("study_length_days").asInteger().withComment("optional length of each patients participation").table()
        .addPrimaryKey("randomset_state_pk", "survey_site_id", "set_name").table()
        .addForeignKey("randomset_site_fk", "survey_site_id").references("survey_site").table()
        .schema()

      .addTable("randomset_stratum").withComment("Each stratum is for a combination of category settings")
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("set_name").asString(50).notNull().table()
        .addColumn("stratum_name").asString(200).notNull().withComment("comma-separated list of category=value strings").table()
        .addColumn("data").asString(4000).withComment("the meaning of this depends on the algorithm used").table()
        .addColumn("counter").asInteger().withComment("increments every time it's changed, for cache maintenance").table()
        .addPrimaryKey("randomset_stratum_pk", "survey_site_id", "set_name", "stratum_name").table()
        .addForeignKey("randomset_stratum_rset_fk", "survey_site_id", "set_name").references("randomset").table()
        .schema()

      .addTable("randomset_participant")
        .withComment("Each patient can be in a RandomSet just once- the group assignment is shown in the UI")
        .addColumn("participant_id").primaryKey().table()
        .addColumn("patient_id").asString(50).table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("set_name").asString(50).notNull().table()
        .addColumn("stratum_name").asString(50)
           .withComment("Empty unless state is Assigned, Withdrawn or Completed").table()
        .addColumn("state").asString(50).notNull().table()
           .withComment("NotYetQualified,Disqualified,Declined, and Assigned,Withdrawn,Completed")
        .addColumn("group_name").asString(50)
           .withComment("null if in a non-assigned state. Assigned states: Assigned, Withdrawn, Completed").table()
        .addColumn("reason").asString(250).withComment("Why it's in the current state, optional").table()
        .addColumn("dt_assigned").asDate().withComment("First time, if withdrawn and added back in").table()
        .addColumn("dt_withdrawn").asDate().withComment("last time. If added back, this is null").table()
        .addForeignKey("randomset_part_pat_fk", "patient_id").references("patient").table()
        .addForeignKey("randomset_fk", "survey_site_id", "set_name").references("randomset").table()
        .addIndex("randomset_part_pk", "patient_id", "survey_site_id", "set_name").unique().table()
        .addIndex("randomset_site_name_ix", "survey_site_id", "set_name", "stratum_name", "group_name").table()
        .withHistoryTable()
        .schema()
        .addSequence("randomset_part_id_seq").start(1000).schema()

      .addTable("activity")
      .withComment("Activities are on an assessment_registration or a survey_registration.")
        .addColumn("activity_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("activity_dt").asDate().notNull().table()
        .addColumn("activity_type").asString(20).table()
        .addColumn("token").asString(4000).table()
        .addColumn("assessment_reg_id").asLong().table()
        .addColumn("meta_version").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addColumn("user_principal_id").asLong().table()
        .addForeignKey("activity_user_fk", "user_principal_id").references("user_principal").table()
        .addForeignKey("activity_site_id_fk", "survey_site_id").references("survey_site").table()
        .addIndex("activity_pat_dt_idx", "patient_id", "activity_dt").table()
        .addIndex("activity_site_tok_atyp_idx","survey_site_id","token","activity_type").table()
        .addIndex("activity_site_asmt_atyp_idx","survey_site_id","assessment_reg_id","activity_type").table()
        .addCheck("activity_token_or_asreg_set", "token IS NOT NULL OR assessment_reg_id IS NOT NULL").table()
        .schema()
      .addSequence("activity_id_seq").start(1000).schema()

      .addTable("patient_result_type")
        .withComment("Types of generated objects we store, such as reports")
        .addColumn("patient_res_typ_id").asLong().notNull().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("result_name").asString(4000).table()
        .addColumn("result_title").asString(4000).table()
        .addPrimaryKey("patient_res_typ_pk", "patient_res_typ_id").table()
        .addForeignKey("patient_res_typ_site_id_fk", "survey_site_id").references("survey_site").table()
        .addIndex("patient_res_typ_site_id_uq", "survey_site_id", "result_name").unique().table().schema()

      .addTable("patient_result")
        .withComment("Stored generated objects.")
        .addColumn("patient_res_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("assessment_reg_id").asLong().notNull().table()
        .addColumn("document_control_id").asString(200).table()
        .addColumn("patient_res_typ_id").asLong().notNull().table()
        .addColumn("patient_res_vs").asInteger().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("result_blob").asBlob().table()
        .addForeignKey("pat_res_site_id_fk", "survey_site_id").references("survey_site").table()
        .addForeignKey("pat_res_asmt_reg_id_fk", "assessment_reg_id").references("assessment_registration").table()
        .addForeignKey("pat_res_typ_id_fk", "patient_res_typ_id").references("patient_result_type").table()
        .addIndex("pat_res_site_asmtreg_idx", "survey_site_id", "assessment_reg_id", "patient_res_typ_id").table()
        .addIndex("pat_res_asmt_reg_id_idx", "assessment_reg_id").table()
        .addIndex("pat_res_typ_id_idx", "patient_res_typ_id").table()
        .customTableClause(Flavor.oracle, "lob (result_blob) store as securefile (compress deduplicate)").schema()

      .addTable("patient_res_to_survey_reg")
        .withComment("Patient result to survey registration relationships -- a many-to-many table referencing "
            + "each of the surveys included in an individual result (report). One result can include data from "
            + "multiple surveys. Over time, one survey can be included in multiple results (reports). "
            + "Note this table is just for record-keeping. The server has no need (yet) for knowing which "
            + "surveys contributed to a report.")
        .addColumn("survey_reg_id").asLong().notNull().table()
        .addColumn("patient_res_id").asLong().notNull().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addPrimaryKey("p_res_to_s_res_pk", "survey_reg_id", "patient_res_id").table()
        .addForeignKey("p_res_to_s_reg_surreg_fk", "survey_reg_id").references("survey_registration").table()
        .addForeignKey("p_res_to_s_reg_patres_fk", "patient_res_id").references("patient_result").table()
        .addForeignKey("p_res_to_s_res_site_fk", "survey_site_id").references("survey_site").table()
        .schema()

      .addTable("provider")
        .addColumn("provider_id").primaryKey().table()
        .addColumn("provider_eid").asString(200).table()
        .addColumn("user_principal_id").asLong().table()
        .addColumn("dt_created").asDate().table()
        .addColumn("dt_changed").asDate().table()
        .addForeignKey("provider_user_fk", "user_principal_id").references("user_principal").table()
        .addIndex("provider_user_idx", "user_principal_id").table()
        .addIndex("provider_eid_idx", "provider_eid").table()
        .schema()

      .addTable("patient_test_only")
        .withComment("A list of MRNs for fake patients used for testing - exclude from reports")
        .addColumn("patient_id").asString(50).primaryKey().table()
        .addForeignKey("p_test_only_pat_id_fk", "patient_id").references("patient").table()
        .schema()

      .addTable("app_config")
        .withComment("Application site specific configuration parameters")
        .addColumn("app_config_id").primaryKey().table()
        .addColumn("survey_site_id").asLong().notNull().table()  // not a foreign key because can be zero
        .addColumn("config_type").asString(255).notNull().table()
        .addColumn("config_name").asString(255).notNull().table()
        .addColumn("config_value").asClob().table()
        .addColumn("enabled").asStringFixed(1).notNull().table()
        .addIndex("app_config_site_ena_type_ix", "survey_site_id", "enabled", "config_type").table() // fill cache
        .addIndex("app_config_site_type_name_uq", "survey_site_id", "config_type", "config_name").unique().table()
        .addCheck("app_config_enabled_yn_ck", "enabled in ('Y','N')").table()
        .schema()

      .addTable("app_config_change_history")
        .withComment("There should be a row in this table for every change to app_config\n"
            + "(to record in a structured way any application configuration changes by site).")
        .addColumn("revision_number").primaryKey().table()
        .addColumn("user_principal_id").asLong().notNull().table()
        .addColumn("changed_at_time").asDate().notNull().table()
        .addColumn("change_type").asStringFixed(1)
          .withComment("Flag: A=added, M=modified, D=disabled").table()
        .addCheck("a_config_hist_ch_type_ck", "change_type in ('A','D','E','M')").table()
        .addColumn("app_config_id").asLong().notNull().table()
        .addColumn("survey_site_id").asLong().notNull().table()  // not a foreign key because can be zero
        .addColumn("config_type").asString(255).notNull().table()
        .addColumn("config_name").asString(255).notNull().table()
        .addColumn("config_value").asClob().table()
        .addForeignKey("app_conf_hist_principal_fk", "user_principal_id").references("user_principal").table()
        .addForeignKey("app_conf_hist_config_id_fk", "app_config_id").references("app_config").table()
        .schema()

      .addTable("service_audit")
        .addColumn("service_audit_id").primaryKey().table()
        .addColumn("username").asString(128).table()
        .addColumn("ip_address").asString(40).table()
        .addColumn("service_path").asString(20).table()
        .addColumn("login_time").asDate().table()
        .addColumn("java_version").asString(20).table()
        .addColumn("java_vendor").asString(20).table()
        .addColumn("os_name").asString(20).table()
        .addColumn("os_version").asString(20).table()
        .addColumn("os_arch").asString(20).table()
        .addColumn("user_agent").asString(4000).table()
        .schema()
      .addSequence("service_audit_seq").schema()
      .addSequence("app_config_sequence").order().schema()
      .addSequence("app_config_change_sequence").order().schema()

      .addTable("survey_reg_attr")
        .addColumn("survey_reg_id").asLong().table()
        .addColumn("data_name").asString(255).table()
        .addColumn("data_value").asString(4000).notNull().table()
        .addPrimaryKey("survey_reg_attr_pk", "survey_reg_id", "data_name").table()
        .addForeignKey("survey_reg_attr_fk", "survey_reg_id").references("survey_registration").table()
        .schema()

      .addTable("survey_reg_attr_hist")
        .withComment("A copy of each new survey_reg_attr created.")
        .addColumn("survey_reg_attr_hist_id").primaryKey().table()
        .addColumn("change_time").asDate().notNull().table()
        .addColumn("survey_reg_id").asLong().notNull().table()
        .addColumn("data_name").asString(255).notNull().table()
        .addColumn("data_value").asString(4000).table()
        .schema()
      .addSequence("survey_reg_attr_hist_seq").order().schema()

      .addTable("user_preference")
        .addColumn("user_principal_id").asLong().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("preference_key").asString(4000).notNull().table()
        .addColumn("preference_value").asClob().table()
        .addPrimaryKey("user_pref_pk", "user_principal_id", "survey_site_id", "preference_key").table()
        .addForeignKey("user_pref_site_fk", "survey_site_id").references("survey_site").table().schema()

        .addTable("plugin_patient_data")
        .addColumn("data_id").primaryKey().table()
        .addColumn("data_type").asString(255).notNull().table()
        .addColumn("data_version").asString(50).notNull().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("dt_created").asDate().notNull().table()
        .addColumn("data_value").asClob().table()
        .addForeignKey("plugin_pat_dat_site_fk", "survey_site_id").references("survey_site").table()
        .addForeignKey("plugin_pat_dat_patient_fk", "patient_id").references("patient").table()
        .schema()
        .addSequence("plugin_patient_sequence").order().schema()

        .addTable("plugin_patient_data_history")
        .addColumn("data_hist_id").primaryKey().table()
        .addColumn("change_type").asStringFixed(1).withComment("Flag: A=added, M=modified").table()
        .addCheck("plugin_pat_hist_ch_type_ck", "change_type in ('A','M')").table()
        .addColumn("data_id").asLong().notNull().table()
        .addColumn("data_type").asString(255).notNull().table()
        .addColumn("data_version").asString(50).notNull().table()
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("patient_id").asString(50).notNull().table()
        .addColumn("dt_created").asDate().notNull().table()
        .addColumn("data_value").asClob().table()
        .addForeignKey("plugin_pat_dat_his_site_fk", "survey_site_id").references("survey_site").table()
        .addForeignKey("plugin_pat_dat_his_pat_fk", "patient_id").references("patient").table()
        .addIndex("plugin_pat_dat_history_ix", "survey_site_id", "patient_id").table()
        .schema()
        .addSequence("plugin_patient_change_sequence").order().schema()

        .addTable("appt_visit")
        .addColumn("appt_visit_id").primaryKey().table()
        .addColumn("visit_type").asString(50).table()
        .addColumn("visit_description").asString(500).table()
        .addColumn( "visit_eid").asLong().table()
        .addIndex("appt_visit_desc_ix", "visit_description").table()
        .addIndex("appt_visit_eid_ix_uq", "visit_eid").unique().table()
        .schema()
        .addSequence("appt_visit_seq").order().schema()

        .addTable("rpt_pedpain_surveys")
        .addColumn("survey_site_id").asLong().notNull().table()
        .addColumn("survey_token_id").asLong().notNull().table()
        .addColumn("assessment_type").asString(50).table()
        .addColumn("survey_started").asDate().table()
        .addColumn("survey_ended").asDate().table()
        .addColumn("is_complete").asStringFixed(1).table()
        .addColumn("survey_user_time_ms").asLong().table()
        .addColumn("pid").asLong().table()
        .addColumn("patient_id").asString(50).table()
        .addColumn("patient_dob").asDate().table()
        .addColumn("patient_gender").asString(250).table()
        .addColumn("patient_race").asString(250).table()
        .addColumn("patient_ethnicity").asString(250).table()
        .addColumn("consent").asString(10).table()
        .addColumn("assent").asString(10).table()
        .addColumn("consent18").asString(10).table()
        .addColumn("prep_consent").asString(10).table()
        .addColumn("prep_assent").asString(10).table()
        .addColumn("prep_consent18").asString(10).table()
        .addColumn("photo_permission").asString(10).table()
        .addColumn("cap_consent").asString(10).table()
        .addColumn("cap_assent").asString(10).table()
        .addColumn("cap_video_perm").asString(10).table()
        .addColumn("research_db").asString(10).table()
        .addColumn("survey_date").asDate().table()
        .addColumn("survey_type").asString(50).table()
        .addColumn("follow_up").asString(50).table()
        .addColumn("assisted_child").asString(50).table()
        .addColumn("assisted_child_helper").asString(250).table()
        .addColumn("parent_respondent").asString(50).table()
        .addColumn("ped_pain_worst").asLong().table()
        .addColumn("ped_pain_avg").asLong().table()
        .addColumn("ped_pain_now").asLong().table()
        .addColumn("ped_pain_least").asLong().table()
        .addColumn("proxy_pain_worst").asLong().table()
        .addColumn("proxy_pain_avg").asLong().table()
        .addColumn("proxy_pain_now").asLong().table()
        .addColumn("proxy_pain_least").asLong().table()
        .addColumn("ped_mobility").asLong().table()
        .addColumn("proxy_mobility").asLong().table()
        .addColumn("ped_pain_inter").asLong().table()
        .addColumn("proxy_pain_inter").asLong().table()
        .addColumn("ped_peer_rel").asLong().table()
        .addColumn("proxy_peer_rel").asLong().table()
        .addColumn("ped_fatigue").asLong().table()
        .addColumn("proxy_fatigue").asLong().table()
        .addColumn("ped_anxiety").asLong().table()
        .addColumn("proxy_anxiety").asLong().table()
        .addColumn("ped_depressive").asLong().table()
        .addColumn("proxy_depressive").asLong().table()
        .addColumn("adult_physical").asLong().table()
        .addColumn("adult_pain_inter").asLong().table()
        .addColumn("adult_pain_behavior").asLong().table()
        .addColumn("adult_social_iso").asLong().table()
        .addColumn("adult_fatigue").asLong().table()
        .addColumn("adult_anxiety").asLong().table()
        .addColumn("adult_depression").asLong().table()
        .addColumn("adult_sleep_dist").asLong().table()
        .addColumn("adult_sleep_impair").asLong().table()
        .addColumn("adult_anger").asLong().table()
        .addPrimaryKey("rpt_pedpain_surveys_pk","survey_site_id", "survey_token_id").table()
        .schema()
        ;
  }
}
