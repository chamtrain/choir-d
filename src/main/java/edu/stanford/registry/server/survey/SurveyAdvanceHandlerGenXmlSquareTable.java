/*
 * Copyright 2015 The Board of Trustees of The Leland Stanford Junior University.
 * All Rights Reserved.
 *
 * See the NOTICE and LICENSE files distributed with this work for information
 * regarding copyright ownership and licensing. You may not use this file except
 * in compliance with a written license agreement with Stanford University.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See your
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package edu.stanford.registry.server.survey;

import java.io.FileInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Properties;
import java.util.function.Supplier;

import org.apache.log4j.Logger;

import com.github.susom.database.Database;
import com.github.susom.database.DatabaseProvider;
import com.github.susom.database.Sql;
import com.google.web.bindery.autobean.shared.AutoBeanCodex;

import edu.stanford.registry.server.ServerContext;
import edu.stanford.registry.server.ServerUtils;
import edu.stanford.registry.server.config.AppConfigEntry;
import edu.stanford.registry.server.SiteInfo;
import edu.stanford.registry.server.config.SitesInfo;
import edu.stanford.registry.server.database.AssessDao;
import edu.stanford.registry.server.database.SurveySystDao;
import edu.stanford.registry.server.utils.SquareUtils;
import edu.stanford.registry.server.utils.SquareUtils.SquareTableParameters;
import edu.stanford.registry.server.utils.SquareXml;
import edu.stanford.registry.shared.Study;
import edu.stanford.registry.shared.SurveyRegistration;
import edu.stanford.registry.shared.SurveySystem;
import edu.stanford.survey.server.SurveyAdvance;
import edu.stanford.survey.server.SurveyAdvanceHandler;
import edu.stanford.survey.server.SurveyAdvanceMonitor;
import edu.stanford.survey.server.SurveyAdvancePush;
import edu.stanford.survey.server.SurveyDao;
import edu.stanford.survey.server.SurveyQuery;

/**
 * Populate a square table of survey results, for columns generated by the square table utilities from the xml,
 * upon completion of each survey.
 */
public class SurveyAdvanceHandlerGenXmlSquareTable implements SurveyAdvanceHandler {
  private static final Logger log = Logger.getLogger(SurveyAdvanceHandlerGenXmlSquareTable.class);

  private long configId = 0L;
  private SurveySystem localSurveySystem = null;
  protected final SiteInfo siteInfo;

  public SurveyAdvanceHandlerGenXmlSquareTable(long configId, SiteInfo siteInfo) {
    this.configId = configId;
    this.siteInfo = siteInfo;
  }

  @Override
  public boolean surveyAdvanced(SurveyAdvance survey, Supplier<Database> dbp) {
    if (configId == 0L) {
      log.debug("No configuration id for the token_id  " + survey.getSurveyTokenId());
      return false;
    }
    Long surveyRegId = getSurveyRegistrationId(survey, dbp);
    if (surveyRegId == null) {
      log.warn("surveyRegId not found for siteId " + survey.getSurveySiteId() + " token_id "
          + survey.getSurveyTokenId());
      return false;
    }
    Database db = dbp.get();
    AppConfigEntry parameters = SquareUtils.getConfig(db, siteInfo, configId);
    SquareTableParameters squareTableParameters = AutoBeanCodex.decode(SquareUtils.getFactory(),
        SquareTableParameters.class, parameters.getConfigValue()).as();
    AssessDao assessDao = new AssessDao(db, siteInfo);
    SurveyRegistration registration = assessDao.getSurveyRegistrationByRegId(surveyRegId);
    if (registration == null) throw new RuntimeException("no registration for site " + surveyRegId + " token_id " + surveyRegId);
    boolean exists = db.toSelect("select 'Y' from " + squareTableParameters.getTableName() + " where survey_site_id=? and survey_token_id=?")
        .argLong(survey.getSurveySiteId())
        .argLong(survey.getSurveyTokenId())
        .queryBooleanOrFalse();
    try {
      Sql sql = new Sql();
      int nbrArgs = 0;
      String separator;
      if (exists) {
        sql.listStart("update " + squareTableParameters.getTableName() + "  set ");
        separator = "=?, ";
      } else {
        sql.listStart("insert into " + squareTableParameters.getTableName() + " (survey_site_id, survey_token_id, patient_id, ")
            .argLong(survey.getSurveySiteId())
            .argLong(survey.getSurveyTokenId())
            .argString(registration.getPatientId());
        separator = ",";
        nbrArgs += 3;
      }

      SurveyDao surveyDao = new SurveyDao(db);
      SurveyQuery query = new SurveyQuery(db, surveyDao, survey.getSurveySiteId());
      SurveySystDao ssDao = new SurveySystDao(dbp);
      Study study = ssDao.getStudy(getSurveySystemId(db), parameters.getConfigName());
      if (study != null) {
        SurveyAdvanceGenerated surveyAdvanceGenerated = new SurveyAdvanceGenerated(siteInfo);
        nbrArgs += surveyAdvanceGenerated.addCompletedSurveyValues(db, survey.getSurveyTokenId(), query, study, squareTableParameters.getPrefix(), sql, separator);
      }
      if ((exists && nbrArgs > 0) || (!exists && nbrArgs > 3)) {
        if (exists) {
          sql.listEnd("=? where survey_site_id=? and survey_token_id=?")
                  .argLong(survey.getSurveySiteId())
                  .argLong(survey.getSurveyTokenId());
        } else {
          sql.append(") values (?");
          while (nbrArgs-- > 1) {
            sql.append(",?");
          }
          sql.append(")");
        }
        try {
          db.toInsert(sql.sql()).apply(sql).insert(1);
        } catch (Exception ex) {
          log.error(ex);
          return false;
        }
      }
      return true;
    } catch (Exception e) {
      throw new RuntimeException("Error storing survey_registration_id " + surveyRegId + " in " + squareTableParameters.getTableName(), e);
    }
  }

  private Long getSurveyRegistrationId(SurveyAdvance survey, Supplier<Database> database) {
    return database.get().toSelect("select survey_reg_id from survey_registration sr, survey_token st"
        + " where sr.survey_site_id=st.survey_site_id and sr.token=st.survey_token"
        + " and st.survey_site_id=? and st.survey_token_id=?")
        .argLong(survey.getSurveySiteId())
        .argLong(survey.getSurveyTokenId())
        .queryLongOrNull();
  }

  private static Long inputSite() {
    String siteIdStr = SquareUtils.getResponse("Enter the siteId", true);
    if (siteIdStr.isEmpty())
      return 0L;
    try {
      long siteId = Long.parseLong(siteIdStr.trim());
      if (siteId == 0L) {
        log.error(siteIdStr + " must be 1 or greater");
        System.exit(1);
      }
      return siteId;
    } catch (NumberFormatException nfe) {
      log.error(siteIdStr + " is not a valid siteId #");
      System.exit(1);
    }
    return null;
  }

  public static void main(String[] args) {
    String propertiesFile = System.getProperty("build.properties", "../build.properties");
    initProperties(propertiesFile);
    new ServerUtils("/");  // initializes some statics
    DatabaseProvider.fromPropertyFile(propertiesFile, "registry.")
        .withSqlParameterLogging()
        .withTransactionControl()
        .transact(dbp -> mainCreateSquareTable(dbp));
  }

  static private void mainCreateSquareTable(Supplier<Database> dbp) throws Exception {
    String studyName = SquareUtils.getResponse("Enter a study name to process or q to quit", true);
    ServerContext serverContext = new ServerContext(dbp);
    SitesInfo sitesInfo = serverContext.getSitesInfo();
    Database db = dbp.get();
    if ("q".equals(studyName)) {
      log.error("Quiting");
      System.exit(0);
    }

    Study study = getStudy(log, dbp, studyName);

    Long siteId = inputSite();
    SiteInfo siteInfo = sitesInfo.getBySiteId(siteId);
    dropAndRecreateTheSquareTable(db, studyName, study, siteInfo);
  }

  static private Study getStudy(Logger log, Supplier<Database> dbp, String studyName) {
    SurveySystDao ssDao = new SurveySystDao(dbp);
    SurveySystem surveySystem = ssDao.getSurveySystem("Local");
    if (surveySystem == null) {
      log.error("No survey_system was found for survey_system_name 'Local'");
      System.exit(1);
    }
    Study study = ssDao.getStudy(surveySystem.getSurveySystemId(), studyName);

    if (study == null) {
      log.error("Study_desciption " + studyName + " with survey system " + surveySystem.getSurveySystemId()
          + " (Local)  was not found in the study table ");
          System.exit(1);
    }
    return study;
  }

  static private void dropAndRecreateTheSquareTable(Database db, String studyName, Study study, SiteInfo siteInfo) {
    Long siteId = siteInfo.getSiteId();
    AppConfigEntry parameters = null;
    SquareTableParameters squareTableParameters = null;
    if (!studyName.isEmpty() && siteId.longValue() > 0L) {
      parameters = SquareUtils.getConfig(db, siteInfo, studyName);
      if (parameters != null) {
        squareTableParameters = AutoBeanCodex.decode(SquareUtils.getFactory(), SquareTableParameters.class, parameters.getConfigValue()).as();
      }
    }
    if (squareTableParameters == null) {
      String tableName = SquareUtils.getResponse(
          "App config not found for " + studyName + " what is the name of the square table?", true);
      String prefix = null;
      if (!tableName.isEmpty()) {
        prefix = SquareUtils.getResponse("What is the column prefix", true);
      }
      if (!prefix.isEmpty()) {
        prefix = prefix.toUpperCase() + "_";
        parameters = SquareUtils.addConfig(db, siteInfo, tableName, studyName, prefix);
        squareTableParameters = AutoBeanCodex.decode(SquareUtils.getFactory(), SquareTableParameters.class, parameters.getConfigValue()).as();
      }
    }
    if (squareTableParameters != null) {
      SquareXml squareXml = new SquareXml(db, siteInfo, parameters.getConfigName(), squareTableParameters.getPrefix());
      boolean found = SquareUtils.findTable(db, squareTableParameters.getTableName());
      if (found) {
        String[] yn = {"y", "n"};
        String drop = SquareUtils.getResponse("Drop table " + squareTableParameters.getTableName()+ " (y/n)?", true, yn);
        if ("y".equals(drop)) {
          db.dropTableQuietly(squareTableParameters.getTableName());
          found = false;
        }
      }
      if (!found) {
        SquareUtils.makeTable(db, squareTableParameters.getTableName());
      }
      LinkedHashMap<String, String> columns = squareXml.getColumns();
      LinkedHashMap<String, String> references = squareXml.getReferences();
      Object refKeys[] = references.keySet().toArray();
      int inx = 0;
      for (String columnName : columns.keySet()) {
        String type = columns.get(columnName);
        String ref = refKeys[inx].toString();
        SquareUtils.makeColumn(db, squareTableParameters.getTableName(),
            squareTableParameters.getPrefix() + ref, type);
        inx++;
      }

      // Reset the handler so it will repopulate the square table
      SurveyDao surveyDao = new SurveyDao(db);

      SurveyAdvancePush push = surveyDao.findSurveyAdvancePush(siteId,
          "generateFromXml[" + parameters.getAppConfigId() + "]");
      if (push == null) {
        push = new SurveyAdvancePush();
        push.setSurveySiteId(siteId);
        push.setRecipientName("generateFromXml[" + parameters.getAppConfigId() + "]");
        push.setRecipientDisplayName(
            "Populate " + squareTableParameters.getTableName() + " for study " + parameters.getConfigName());
        push.setFailedCount(0L);
        push.setEnabled(true);
        surveyDao.insertSurveyAdvancePush(push);
      } else {
        push.setPushedSurveySequence(null);
        push.setLastPushedTime(null);
        surveyDao.updateSurveyAdvancePush(push);
      }

      // new ServerUtils(new HashMap<String,String>(), ".");  Why is this here???
      SurveyAdvanceMonitor monitor = new SurveyAdvanceMonitor(siteId, new SurveyAdvanceHandlerFactoryImpl(siteInfo));
      monitor.pollAndNotify(db);
    }
  }

  public int getSurveySystemId(Database db) {
    if (localSurveySystem == null) {
      localSurveySystem = new SurveySystDao(db).getSurveySystem("Local");
    }
    return localSurveySystem.getSurveySystemId();
  }

  public static void initProperties(String propertiesFile) {
    Properties buildProperties = new Properties();
    try {
      FileInputStream is = new FileInputStream(propertiesFile);
      buildProperties.load(is);
      is.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
    HashMap<String, String> params = new HashMap<>();
    String applicationHome = getProperty(buildProperties,  params, "registryHome");
    if (applicationHome == null) {
      applicationHome = "./";
    }

    Enumeration<?> names = buildProperties.keys();
    while (names.hasMoreElements()) {
      String key = (String) names.nextElement();
      params.put(key, getProperty(buildProperties, params, key));
    }
    //params.put("email.template.directory", "src/main/resources/default/email-templates");
    //params.put("registry.email.file", "build/email.log");
    // ServerUtils serverUtils = new ServerUtils(params, applicationHome); WHY IS THIS HERE?
  }


  private static String getProperty(Properties buildProperties, HashMap<String, String> params, String propName) {
    String propValue = System.getProperty(propName, buildProperties.getProperty(propName));
    if (propValue != null) {
      if (propValue.startsWith("$(") || propValue.startsWith("${")) {
        propValue = buildProperties.getProperty(propName);
      }
      params.put(propName, propValue);
    }
    return propValue;
  }

}
